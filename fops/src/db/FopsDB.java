/*
 * The big ol' honking database class for FOPS.
 */
package db;

import java.util.Map;
import java.util.Hashtable;
import java.util.Collection;
import java.lang.reflect.*;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import db.rules.*;

/**
 * FopsDB is the database for the FOPS project.  It provides access
 * to committees and faculty members, as well as serialization and
 * deserialization methods.
 */
public class FopsDB {

    private Map<Integer, Staff> faculty;
    private Map<String, Committee> committees;
    private static Gson gson;
    static {
        GsonBuilder builder = new GsonBuilder();
        //builder.setPrettyPrinting();
        builder.registerTypeAdapter(Rule.class, new RuleJsonizer());
        gson = builder.create();
    }

    /**
     * Construct a new, empty Database.
     */
    public FopsDB() {
        faculty = new Hashtable<Integer, Staff>();
        committees = new Hashtable<String, Committee>();
    }

    /**
     * Get a Gson object suitable for serializing and deserializing
     * FopsDB objects.
     * @return  the Gson object
     */
    public Gson getGson() {
        return gson;
    }

    /**
     * Encode this database into a JSON string.
     * @return  the JSON string that serializes this database
     */
    public String toJson() {
        return gson.toJson(this);
    }

    /**
     * Convert a JSON-style String (as generated by toJson()) into
     * a FopsDB object.
     * @param   json the JSON-style string
     * @return  the FopsDB object that was encoded in json
     */
    public static FopsDB fromJson(String json) {
        FopsDB db = new FopsDB();
        db = gson.fromJson(json, FopsDB.class);
        for (Committee committee : db.committees.values()) {
            committee.setDB(db);
        }
        return db;
    }

    /**
     * Add a committee to the database.
     * @param   committee the Committee to add
     */
    public void addCommittee(Committee committee) {
        committees.put(committee.getName(), committee);
    }

    /**
     * Add a faculty member to the database.
     * @param   faculty the faculty member
     */
    public void addFaculty(Staff faculty) {
        this.faculty.put(faculty.getDBID(), faculty);
    }

    /**
     * Get a committee from the database.
     * @param   name the name of the committee
     * @return  the committee with that name
     */
    public Committee getCommittee(String name) {
        return committees.get(name);
    }

    /**
     * Get a Collection of all the committees.
     * @return  a Collection view of all committees
     */
    public Collection<Committee> getAllCommittees() {
        return committees.values();
    }

    /**
     * Get a faculty member from the database.
     * @param   dbid the database ID of the faculty member
     * @return  the faculty member
     */
    public Staff getFaculty(int dbid) {
        return faculty.get(dbid);
    }

    /**
     * Get a faculty member from the database.
     * @param   name the name of the faculty member
     * @return  the FIRST faculty member encountered in the database with
     *          said name
     */
    public Staff getFaculty(String name) {
        for (Staff person : faculty.values()) {
            if (name.equals(person.getName())) {
                return person;
            }
        }
        //TODO throw exception instead
        return null;
    }

    /**
     * Get an array of all Faculty members.
     * @return  a Collection view of all the faculty members
     */
    public Collection<Staff> getAllFaculty() {
        return faculty.values();
    }
}
